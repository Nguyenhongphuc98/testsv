const http2 = require('http2');
const fs = require('fs');
const path = require('path');

const server = http2.createServer((req, res) => {

});

// L·∫Øng nghe khi c√≥ k·∫øt n·ªëi m·ªõi
server.on('session', (session) => {
  console.log('üÜï New connection');

  session.on('close', () => {
    console.log('‚ùå Session closed');
  });
});

// L·∫Øng nghe c√°c stream (y√™u c·∫ßu m·ªõi)
server.on('stream', (stream, headers) => {
  const method = headers[':method'];
  const pathName = headers[':path'];
  console.log(`üì• New ${method} request on ${pathName}`);

  if (method === 'GET' && pathName === '/') {
    returnIndexPage(stream);
  } else if (method === 'GET') {
    handleGetReq(stream);
  } else {
    // Ph·∫£n h·ªìi cho c√°c ph∆∞∆°ng th·ª©c kh√°c
    stream.respond({ ':status': 405 });
    stream.end('‚ùå Method not allowed');
  }
});

// Gi·ªØ k·∫øt n·ªëi 15 gi√¢y n·∫øu kh√¥ng c√≥ y√™u c·∫ßu
// server.setTimeout(15000);

server.listen(8080, () => {
  console.log('HTTP/2 server listening on 8080');
});


function returnIndexPage(stream) {
	// Serve id.html for GET /
    const filePath = path.join(__dirname, 'main.html');
    fs.readFile(filePath, (err, data) => {
      if (err) {
        stream.respond({ ':status': 500 });
        stream.end('Internal Server Error');
        return;
      }
      stream.respond({
        'content-type': 'text/html',
        ':status': 200
      });
      stream.end(data);
    });
}

function handleGetReq(stream) {
	// Tr·∫£ v·ªÅ ph·∫£n h·ªìi cho GET
    stream.respond({
      'content-type': 'text/plain',
      ':status': 200
    });
    stream.end(`‚úÖ You sent a GET request to ${pathName}`);
}